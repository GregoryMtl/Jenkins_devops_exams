apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  default.conf: |
    server {
      listen 8080;

      location /api/v1/movies {
        proxy_pass http://movie-service:8000/api/v1/movies;
      }

      location /api/v1/casts {
        proxy_pass http://cast-service:8000/api/v1/casts;
      }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nginx.name }}
  labels:
    name: {{ .Values.nginx.name }}
spec:
  {{- if not .Values.nginx.autoscaling.enabled }}
  replicas: {{ .Values.nginx.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      name: {{ .Values.nginx.name }}
  template:
    metadata:
      labels:
        name: {{ .Values.nginx.name }}
    spec:
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
            defaultMode: 484
      containers:
        - name: {{ .Values.nginx.name }}
          image: "{{ .Values.nginx.image }}"
          ports:
            - containerPort: {{ .Values.nginx.service.port }}
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.movie_service.name }}
  labels:
    name: {{ .Values.movie_service.name }}
spec:
  {{- if not .Values.movie_service.autoscaling.enabled }}
  replicas: {{ .Values.movie_service.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      name: {{ .Values.movie_service.name }}
  template:
    metadata:
      labels:
        name: {{ .Values.movie_service.name }}
    spec:
      containers:
        - name: {{ .Values.movie_service.name }}
          image: "{{ .Values.movie_service.image.repository }}:{{ .Values.movie_service.image.tag }}"
          command: [{{ .Values.movie_service.image.command }}]
          args: {{ .Values.movie_service.image.args }}
          env:
            - name: DATABASE_URI
              value: postgresql://movie_db_username:movie_db_password@movie-db/movie_db_dev
            - name: CAST_SERVICE_HOST_URL
              value: http://cast_service:8000/api/v1/casts/
          ports:
            - containerPort: {{ .Values.movie_service.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: movie-volume
              mountPath: /app
      volumes:
        - name: movie-volume

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.cast_service.name }}
  labels:
    name: {{ .Values.cast_service.name }}
spec:
  {{- if not .Values.cast_service.autoscaling.enabled }}
  replicas: {{ .Values.cast_service.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      name: {{ .Values.cast_service.name }}
  template:
    metadata:
      labels:
        name: {{ .Values.cast_service.name }}
    spec:
      containers:
        - name: {{ .Values.cast_service.name }}
          image: "{{ .Values.cast_service.image.repository }}:{{ .Values.cast_service.image.tag }}"
          command: [{{ .Values.movie_service.image.command }}]
          args: {{ .Values.movie_service.image.args }}
          env:
            - name: DATABASE_URI
              value: postgresql://cast_db_username:cast_db_password@cast-db/cast_db_dev
          ports:
            - containerPort: {{ .Values.cast_service.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: cast-volume
              mountPath: /app
      volumes:
        - name: cast-volume